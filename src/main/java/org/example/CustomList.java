package org.example;

import java.util.Comparator;

/**
 * CustomList упорядоченная коллекция, в которой пользователь может точно контролировать,
 * в какое место в списке вставляется каждый элемент.
 * Пользователь может получать доступ к элементам по их целочисленному индексу (позиции в списке).
 *
 * @param <E> тип элементов в списке
 */
public interface CustomList<E> {

    /**
     * Возвращает количество элементов в этом списке.
     *
     * @return количество элементов в этом списке
     */
    int size();

    /**
     * Добавляет указанный элемент в конец этого списка.
     *
     * @param element элемент, который будет добавлен в этот список
     */
    void add(E element);

    /**
     * Добавляет элемент в коллекцию по указанному индексу, сдвигая остальные элементы при необходимости.
     *
     * @param index   индекс, по которому нужно добавить элемент
     * @param element элемент, который нужно добавить
     */
    void add(int index, E element);

    /**
     * Возвращает элемент из коллекции по указанному индексу.
     *
     * @param index индекс, по которому нужно получить элемент
     * @return элемент, расположенный по указанному индексу
     */
    E get(int index);

    /**
     * Заменяет элемент в коллекции по указанному индексу новым элементом.
     *
     * @param index   индекс, по которому нужно заменить элемент
     * @param element новый элемент, которым нужно заменить существующий
     */
    void set(int index, E element);

    /**
     * Удаляет элемент из коллекции по указанному индексу и возвращает удаленный элемент.
     *
     * @param index индекс элемента, который нужно удалить
     * @return удаленный элемент
     */
    E remove(int index);

    /**
     * Сортирует элементы в коллекции, используя указанный компаратор.
     *
     * @param c компаратор, используемый для сравнения элементов при сортировке
     */
    void sort(Comparator<? super E> c);

    /**
     * Удаляет все элементы из коллекции и сбрасывает размер коллекции в 0.
     */
    void clear();

}
